{"version":3,"sources":["handlers/ApiRequestHandler.js","pages/Home.js","components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["ApiRequestHandler","url","Promise","resolve","reject","fetch","method","headers","Accept","then","response","json","responseJson","status","data","console","log","catch","error","UserPage","props","state","user","apiRequestHandler","React","Component","Routes","exact","path","component","Home","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6UAsCeA,E,6NA/BDC,E,UALE,uC,6BAOD,IAAIC,SAAQ,SAACC,EAASC,GACzBC,MAAMJ,EAAK,CACPK,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACR,eAAgB,sBAGnBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACyB,YAAxBA,EAAaC,OACbV,EAAQS,EAAaE,MAErBC,QAAQC,IAAI,YAAaJ,EAAaC,WAG7CI,OAAM,SAACC,GACJH,QAAQC,IAAI,QAASE,GACrBd,EAAOc,U,wGCMZC,E,YA7BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,IAGV,EAAKC,kBAAoB,IAAIvB,EANd,E,iFAenBe,QAAQC,IAAI,wC,+BAKR,OACI,6BAEG,+C,GAxBQQ,IAAMC,WCWdC,MAVf,WACI,OACI,8BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,OCUlCC,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,mCACO,4CADP,wBAGE,kBAAC,EAAD,S,QCCUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAAyBC,SAASC,eAAe,SD0H1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.dc93e4df.chunk.js","sourcesContent":["//import axios from \"axios\";\r\n//import React from \"react\";\r\nconst API_URL = \"https://jsonplaceholder.typicode.com\";\r\n\r\nclass ApiRequestHandler {\r\n\r\n    async getAllUsers() {\r\n        const url = `${API_URL}/users/`;\r\n       // return axios.get(url).then(response => response.data);\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, {\r\n                method: 'GET',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            })\r\n                .then((response) => response.json())\r\n                .then((responseJson) => {\r\n                    if (responseJson.status === \"SUCCESS\") {\r\n                        resolve(responseJson.data);\r\n                    } else {\r\n                        console.log(\"Error in:\", responseJson.status);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error', error);\r\n                    reject(error)\r\n                });\r\n        })\r\n    }\r\n\r\n    /*async getUser(id) {\r\n        const url = `${API_URL}/users/${id}`;\r\n        return axios.get(url).then(response => response.data);\r\n    }*/\r\n}\r\n\r\nexport default ApiRequestHandler;","import React from \"react\";\r\nimport ApiRequestHandler from \"../handlers/ApiRequestHandler\";\r\n\r\nclass UserPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: {}\r\n        };\r\n\r\n        this.apiRequestHandler = new ApiRequestHandler();\r\n    }\r\n\r\n    componentDidMount() {\r\n       // const id = this.props.match.params.id;\r\n\r\n    /*    this.apiRequestHandler.getAllUsers().then(response => {\r\n            this.setState({ user: response });\r\n        });*/\r\n    console.log(\"XXXXXXX_SSSSSSSSSSSSSSSSSSS_XXXXXX\")\r\n    }\r\n\r\n    render() {\r\n       // const user = this.state.user;\r\n        return (\r\n            <div>\r\n               {/* <h2>Name: {user}</h2>*/}\r\n               <h2>HIIIIIIIII</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserPage;","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Home from \"../pages/Home\";\r\n\r\nfunction Routes() {\r\n    return (\r\n        <main>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Home} />\r\n            </Switch>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport Routes from  './components/Routes'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n          <Routes/>\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}